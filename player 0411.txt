using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using System.Xml.Linq;
using UnityEngine;

public class Player2222Move : MonoBehaviour
{
    public float maxSpeed;
    public float jumpPower;
    public float jumpCount;
    public Gamemanager manager;


    



    Rigidbody2D rigid;
    SpriteRenderer spriteRenderer;
    Animator anim;
    GameObject scanObject;

    void Start()
    {
        manager = Gamemanager.Instance; //인스턴스
    }
    void Awake()
    {
        rigid = GetComponent<Rigidbody2D>();
        spriteRenderer = GetComponent<SpriteRenderer>();
        anim = GetComponent<Animator>();
        transform.eulerAngles = new Vector3(0, 180, 0);
    }
    private float curTime;
    public Transform pos;
    public Vector2 boxSize;
    float direction = 1f;

    
    private void Update()
    {
        if (!manager.isAction)
        {
            //공격
            //'Z'버튼을 공격버튼으로
            if (Input.GetKey(KeyCode.Z))
            {
                if (curTime <= 0)
                {

                    Collider2D[] collider2Ds = Physics2D.OverlapBoxAll(pos.position, boxSize, 0);
                    foreach (Collider2D collider in collider2Ds)
                    {
                        if (collider.tag == "Enemy")
                        {
                            collider.GetComponent<Enemy>().TakeDamage(1);
                        }
                    }
                    anim.SetTrigger("atk");

                }
            }







            //Jump
            if (Input.GetButtonDown("Jump") && jumpCount < 2)
            {
                rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
                jumpCount++;
                anim.SetBool("isJumping", true);
            }
            //Stop Speed
            if (Input.GetButtonUp("Horizontal"))
            {
                rigid.velocity = new Vector2(rigid.velocity.normalized.x * 0.5f, rigid.velocity.y);
            }

            //방향 Sprite
            float horizontalInput = Input.GetAxisRaw("Horizontal");
            if (horizontalInput < 0)
            {
                transform.rotation = Quaternion.Euler(0, 180, 0); // Face left
                direction = -1f;
            }

            else if (horizontalInput > 0)
            {
                transform.rotation = Quaternion.Euler(0, 0, 0); // Face right
                direction = 1f;
            }


            //Animation
            if (Mathf.Abs(rigid.velocity.x) < 0.5)
                anim.SetBool("isWalking", false);
            else
                anim.SetBool("isWalking", true);
        }
            
        
        
        //scanObject
            if (Input.GetKeyDown(KeyCode.E) && scanObject != null)
            {
                manager.Action(scanObject);
                //Debug.Log("This is :" + scanObject);

            }
        
    }



    void FixedUpdate()
    {
        
        //Ray
        Debug.DrawRay(rigid.position, Vector2.right * direction, new Color(0, 1, 0));
        RaycastHit2D rayHit = Physics2D.Raycast(rigid.position, Vector2.right, direction, LayerMask.GetMask("Object"));

        if (rayHit.collider != null)
        {
            scanObject = rayHit.collider.gameObject;
        }
        else
            scanObject = null;
        if (!manager.isAction)
        {
            //Move By Key Control

            float h = Input.GetAxisRaw("Horizontal");

            rigid.AddForce(Vector2.right * h, ForceMode2D.Impulse);

            if (rigid.velocity.x > maxSpeed)
                rigid.velocity = new Vector2(maxSpeed, rigid.velocity.y); // Right Max Speed
            else if (rigid.velocity.x < maxSpeed * (-1))
                rigid.velocity = new Vector2(maxSpeed * (-1), rigid.velocity.y); // Left Max Speed

            // Platform 착지 감지
            if (rigid.velocity.y < 0)
            {
                Debug.DrawRay(rigid.position, Vector3.down, new Color(0, 1, 0));
                rayHit = Physics2D.Raycast(rigid.position, Vector3.down, 1, LayerMask.GetMask("Platform"));
                if (rayHit.collider != null)
                {
                    anim.SetBool("isJumping", false);
                    if (rayHit.distance < 0.5f)
                    {
                        jumpCount = 0;
                    }
                }
            }
            //Move by Ladder
            if (isLadder)
            {
                float ver = Input.GetAxis("Vertical");
                rigid.gravityScale = 0;
                rigid.velocity = new Vector2(rigid.velocity.x, ver * maxSpeed);
            }
            else
            {
                rigid.gravityScale = 1f;

            }
        }
    }
    private void OnDrawGizmos()
    {
        Gizmos.color = Color.blue;
        Gizmos.DrawWireCube(pos.position, boxSize);
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        //피격 감지
        if (collision.gameObject.tag == "Enemy" || collision.gameObject.tag == "Spikes")
        {
            OnDamged(collision.transform.position);

        }

        // 바닥(또는 발판) 오브젝트와 충돌한 경우
        if (collision.gameObject.tag == "Ground")
        {
            // 점프 애니메이션을 멈춘다
            anim.SetBool("isJumping", false);
            // 점프 횟수 초기화
            jumpCount = 0;
        }


    }
    // 사다리 상하움직임1
    public bool isLadder;


    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Ladder")
        {
            isLadder = true;
        }
    }
    private void OnTriggerExit2D(Collider2D collision)
    {
        // 사다리 상하움직임2
        if (collision.gameObject.tag == "Ladder")
        {
            isLadder = false;
        }
    }

    void OnDamged(Vector2 targetPos)
    {
        // Change Layer (Immortal Active)
        gameObject.layer = 8;

        //View Alpha
        spriteRenderer.color = new Color(1, 1, 1, 0.4f);

        // Reaction Force
        int dirc = transform.position.x - targetPos.x > 0 ? 1 : -1;
        rigid.AddForce(new Vector2(dirc, 1) * 7, ForceMode2D.Impulse);
        // Animation
        anim.SetTrigger("doDameged");

        Invoke("OffDamged", 3);
    }

    void OffDamged()
    {
        gameObject.layer = 10;
        spriteRenderer.color = new Color(1, 1, 1, 1);
    }






}   